<?phpclass AjaxController extends Zend_Controller_Action{	protected $current_user;	protected $current_student;	protected $active_exam;	protected $userm;	protected $examm;	protected $studentm;	protected $questionm;	protected $examsessionm;	public function init()	{		$this->userm = new Model_User();		$this->examm = new Model_Exam();		$this->studentm = new Model_Student();		$this->questionm = new Model_Question();		$this->examsessionm = new Model_ExamSession();		$auth = Zend_Auth::getInstance();		if($auth->hasIdentity())		{			$this->current_user = $auth->getIdentity();			$this->current_student = $this->studentm->fetchRow('user_id='.$this->current_user->id);			$this->active_exam = $this->examm->exam_today($this->current_student->course_id);		}	}		public function indexAction()	{		$this->_helper->json(array('sdsd'));	}	public function checkExamStartAtAction()	{		$start_at_time = strtotime($this->active_exam->start_at);		$start_at = date('h:i A', $start_at_time);		$now = time();		$seconds_diff = $start_at_time - $now;		$minute_left = (int)($seconds_diff / 60);		if($minute_left < 10)			$minute_left = '0'.$minute_left;		$second_left = ($seconds_diff % 60);		if($second_left < 10)			$second_left = '0'.$second_left;		$time_left = "00:".$minute_left.":".$second_left;		if($minute_left <= 5)			$time_left = $minute_left." min ".$second_left." sec";				if($seconds_diff <= 0)		{			$this->examm->update(array('status'=>'active'), 'exam_id = '.$this->active_exam->exam_id);			if( isset($_SESSION['exam_session_id']) )				$this->examsessionm->start($_SESSION['exam_session_id'], $this->active_exam->exam_duration);		}		$this->_helper->json(array('start_at'=>$start_at, 'time_left'=>$time_left, 'countdown'=>$seconds_diff));	}	public function checkExamEndAtAction()	{		$end_at_time = strtotime($this->active_exam->end_at);		$end_at = date('h:i A', $end_at_time);		$now = time();		$seconds_diff = $end_at_time - $now;		$minute_left = (int)($seconds_diff / 60);		if($minute_left < 10)			$minute_left = '0'.$minute_left;		$second_left = ($seconds_diff % 60);		if($second_left < 10)			$second_left = '0'.$second_left;		// $time_left = "00:".$minute_left.":".$second_left;		$time_left = $minute_left."m ".$second_left."s";		if($minute_left <= 5)			$time_left = $minute_left." min ".$second_left." sec";				// if($seconds_diff <= 0)		// {			// $this->examm->update(array('status'=>'active'), 'exam_id = '.$this->active_exam->exam_id);			// if( isset($_SESSION['exam_session_id']) )				// $this->examsessionm->start($_SESSION['exam_session_id'], $this->active_exam->exam_duration);		// }		$this->_helper->json(array('end_at'=>$end_at, 'time_left'=>$time_left, 'countdown'=>$seconds_diff));	}	public function prepareSessionAction()	{		$session_id = $this->examsessionm->prepare();		$this->_helper->json(array('Exam session prepared. Exam session ID: '.$session_id));	}	public function questionAction()	{		$question_no = $this->_request->getParam('question_no', null);		$return = array();		if($question_no)		{			$questions = $this->examsessionm->questions($this->examsessionm->get_session());			$question = $this->examsessionm->question($question_no);			if($question)			{				if(isset($questions[$question_no-1]['q']))				{					$return = array(						'question_id' => $question->question_id,						'question_type' => $question->question_type,						'question' => $question->question,						'opt1' => $question->opt1,						'opt2' => $question->opt2,						'opt3' => $question->opt3,						'opt4' => $question->opt4,						'ans' => $questions[$question_no-1]['a']						);				}			}		}				$this->_helper->json($return);	}	public function saveAnswerAction()	{		$return = array('Answer not saved');		$question_no = $this->_request->getParam('question_no', null);		$answer = $this->_request->getParam('answer', null);		$questions = $this->examsessionm->questions($this->examsessionm->get_session());		if(isset($questions[$question_no-1]['q']))		{			$questions[$question_no-1]['a'] = $answer;			$result = $this->examsessionm->update_questions($questions);			$return = array('Answer saved for question Q'.$question_no);		}		$this->_helper->json($return);	}	public function getQuestionsAction()	{		$questions = $this->examsessionm->questions($this->examsessionm->get_session());		// print_r($questions);		$this->_helper->json($questions);	}	public function evaluateAction()	{		$this->examsessionm->complete();		$this->_helper->json(array('Completed'));	}}